#!/usr/bin/env python3
# verificador_programado.py

"""
Componente para a√±adir a la aplicaci√≥n Streamlit que verifica
peri√≥dicamente si debe ejecutarse la validaci√≥n de titulares sin reportes
"""

import streamlit as st
import threading
import time
import sys
from datetime import datetime, timedelta
import logging
from verificar_titulares_sin_reportes import ejecutar_verificacion_periodica
from database import crear_conexion

# Importar schedule con manejo de excepciones
try:
    import schedule
except ImportError:
    st.error("""
    El m√≥dulo 'schedule' no est√° instalado. 
    
    Por favor, ejecuta el siguiente comando para instalarlo:
    ```
    pip install schedule
    ```
    
    O ejecuta el script de configuraci√≥n autom√°tica:
    ```
    python setup_automatizacion.py
    ```
    """)

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('verificacion_automatica.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger('verificador_programado')

# Variable global para controlar el hilo de ejecuci√≥n
_thread_running = False
_verificador_thread = None

def ejecutar_verificacion_si_primer_dia_mes():
    """Ejecuta la verificaci√≥n solo si es el primer d√≠a del mes"""
    today = datetime.now()
    if today.day == 1:  # Es el primer d√≠a del mes
        return ejecutar_verificacion()
    else:
        logger.info("No es el primer d√≠a del mes, omitiendo verificaci√≥n programada")
        return None

def ejecutar_verificacion():
    """Ejecutar la verificaci√≥n programada"""
    try:
        logger.info("Iniciando verificaci√≥n programada...")
        # Realizar la verificaci√≥n
        resumen = verificar_automaticamente()
        
        # Actualizar el mensaje para mostrar en la interfaz
        st.session_state.verificacion_mensaje = f"‚úÖ Verificaci√≥n realizada: {resumen}"
        
        return resumen
    except Exception as e:
        logger.error(f"Error en verificaci√≥n programada: {e}")
        st.session_state.verificacion_mensaje = f"‚ùå Error durante la verificaci√≥n: {str(e)}"

def verificador_thread():
    """Funci√≥n que se ejecuta en un hilo separado para programar tareas"""
    global _thread_running
    
    logger.info("Hilo verificador iniciado")
    
    # Programar la verificaci√≥n para el primer d√≠a de cada mes a las 8:00 AM
    schedule.every().day.at("08:00").do(ejecutar_verificacion_si_primer_dia_mes)
    
    # Para pruebas, tambi√©n podemos programarla para que se ejecute cada d√≠a a cierta hora
    #schedule.every().day.at("20:00").do(ejecutar_verificacion)
    
    # Loop principal del hilo
    while _thread_running:
        schedule.run_pending()
        time.sleep(60)  # Verificar cada minuto si hay tareas pendientes
    
    logger.info("Hilo verificador detenido")

def iniciar_verificador():
    """Inicia el hilo verificador si no est√° ya en ejecuci√≥n"""
    global _thread_running, _verificador_thread
    
    if _thread_running:
        return
    
    _thread_running = True
    _verificador_thread = threading.Thread(target=verificador_thread, daemon=True)
    _verificador_thread.start()
    logger.info("Verificador programado iniciado")

def detener_verificador():
    """Detiene el hilo verificador"""
    global _thread_running
    
    if not _thread_running:
        return
    
    _thread_running = False
    logger.info("Se√±al de detenci√≥n enviada al verificador programado")

def mostrar_panel_verificacion():
    """Muestra un panel de control para la verificaci√≥n programada en Streamlit"""
    st.subheader("‚è∞ Verificaci√≥n Programada de Titulares sin Reportes")
    
    # Verificar si schedule est√° disponible
    try:
        import schedule
        schedule_disponible = True
    except ImportError:
        schedule_disponible = False
        st.warning("""
        ‚ö†Ô∏è El m√≥dulo 'schedule' no est√° instalado. La verificaci√≥n autom√°tica dentro de la aplicaci√≥n
        no estar√° disponible, pero el cron job del sistema seguir√° funcionando.
        
        Para habilitar la verificaci√≥n autom√°tica dentro de la aplicaci√≥n, ejecute:
        ```
        pip install schedule
        ```
        """)
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.info("""
        Este componente verifica autom√°ticamente los titulares sin reportes
        el primer d√≠a de cada mes a las 8:00 AM y env√≠a notificaciones por email.
        """)
        
        # Mostrar pr√≥xima ejecuci√≥n
        proximo_mes = datetime.now().replace(day=1) + timedelta(days=32)
        proximo_mes = proximo_mes.replace(day=1, hour=8, minute=0, second=0, microsecond=0)
        st.write(f"üìÖ **Pr√≥xima verificaci√≥n programada:** {proximo_mes.strftime('%d/%m/%Y %H:%M')}")
        
        # Verificar si hay tareas cron configuradas
        try:
            import subprocess
            result = subprocess.run(['crontab', '-l'], capture_output=True, text=True)
            if result.returncode == 0 and 'ejecucion_programada.py' in result.stdout:
                st.success("‚úÖ Cron job configurado correctamente en el sistema")
            else:
                st.warning("‚ö†Ô∏è No se detect√≥ cron job para la verificaci√≥n autom√°tica")
        except Exception:
            # Si no se puede verificar cron, simplemente no mostramos nada
            pass
        
        # Mostrar resultados de verificaciones recientes
        if "ultimas_verificaciones" in st.session_state and st.session_state.ultimas_verificaciones:
            st.write("üìä **Verificaciones recientes:**")
            
            for verificacion in reversed(st.session_state.ultimas_verificaciones):
                ya_notificados = verificacion.get("ya_notificados", 0)
                st.markdown(f"""
                *{verificacion["fecha"]}*: {verificacion["titulares_sin_reportes"]} titulares sin reportes, 
                {verificacion["emails_enviados"]} emails enviados, 
                {ya_notificados} ya notificados anteriormente, 
                {verificacion["errores"]} errores
                """)
    
    with col2:
        # Bot√≥n para ejecutar verificaci√≥n manual
        if st.button("üîç Ejecutar verificaci√≥n ahora", use_container_width=True):
            with st.spinner("Ejecutando verificaci√≥n..."):
                ejecutar_verificacion()
                # El mensaje de √©xito se mostrar√° en la siguiente recarga
                st.rerun()  # Recargar para mostrar resultados actualizados
        
        # Mostrar mensaje de estado si existe
        if "verificacion_mensaje" in st.session_state:
            # Usar el mensaje guardado durante la ejecuci√≥n
            st.write(st.session_state.verificacion_mensaje)
            # Opcionalmente, podemos limpiar el mensaje despu√©s de mostrarlo una vez
            # para que no persista indefinidamente
            # del st.session_state.verificacion_mensaje
        
        # Bot√≥n para ejecutar el script de configuraci√≥n
        if not schedule_disponible:
            if st.button("‚öôÔ∏è Configurar automatizaci√≥n", use_container_width=True):
                st.info("Ejecutando configuraci√≥n en segundo plano...")
                try:
                    import subprocess
                    subprocess.Popen([sys.executable, "setup_automatizacion.py"],
                                    stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                    st.success("‚úÖ Configuraci√≥n iniciada en segundo plano")
                except Exception as e:
                    st.error(f"‚ùå Error al iniciar configuraci√≥n: {e}")

def inicializar_verificador_en_app():
    """
    Funci√≥n principal para inicializar el verificador en la aplicaci√≥n Streamlit.
    Debe llamarse al inicio de la aplicaci√≥n.
    """
    # Verificar si schedule est√° disponible
    try:
        import schedule
        
        # Iniciar el hilo verificador cuando la aplicaci√≥n carga
        if "verificador_iniciado" not in st.session_state:
            iniciar_verificador()
            st.session_state.verificador_iniciado = True
            
    except ImportError:
        # Si schedule no est√° disponible, registrar pero no bloquear la app
        logging.warning("No se pudo iniciar el verificador programado: m√≥dulo 'schedule' no disponible")
        # No bloqueamos la aplicaci√≥n, simplemente no inicializamos el verificador

# Ejemplo de uso en una p√°gina de administraci√≥n
if __name__ == "__main__":
    st.title("Panel de Administraci√≥n")
    
    inicializar_verificador_en_app()
    mostrar_panel_verificacion()

#!/usr/bin/env python3
"""
P√°gina de configuraci√≥n de email para el sistema de gesti√≥n de marcas.

Esta p√°gina permite configurar las credenciales de email para el env√≠o
de notificaciones desde la aplicaci√≥n. Las contrase√±as se almacenan de 
forma segura usando el keyring del sistema operativo.
"""

import streamlit as st
import logging
from email_utils import (
    guardar_credenciales, 
    obtener_credenciales, 
    probar_envio,
    eliminar_credenciales
)

def show_email_config_page():
    """
    Muestra la p√°gina de configuraci√≥n de email con el formulario
    para guardar y probar las credenciales de correo.
    """
    st.title("üîê Configuraci√≥n de Email")
    
    st.markdown("""
    Configure las credenciales para env√≠o de correos electr√≥nicos. 
    La contrase√±a se almacena de forma segura en el sistema usando keyring.
    """)
    
    # Obtener credenciales existentes (si hay)
    credenciales = obtener_credenciales()
    
    # Formulario para las credenciales
    with st.form("email_config_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            email = st.text_input(
                "Correo electr√≥nico", 
                value=credenciales.get("email", "") if credenciales else "",
                help="Direcci√≥n de correo desde la que se enviar√°n notificaciones"
            )
            
            password = st.text_input(
                "Contrase√±a", 
                type="password",
                help="La contrase√±a se almacenar√° de forma segura en el sistema"
            )
        
        with col2:
            smtp_host = st.text_input(
                "Servidor SMTP", 
                value=credenciales.get("smtp_host", "smtp.gmail.com") if credenciales else "smtp.gmail.com",
                help="Ej: smtp.gmail.com, smtp.office365.com"
            )
            
            smtp_port = st.text_input(
                "Puerto SMTP", 
                value=str(credenciales.get("smtp_port", 587)) if credenciales else "587",
                help="Puerto para conexi√≥n TLS (generalmente 587)"
            )
        
        # Botones de acci√≥n
        col1, col2, col3 = st.columns([1, 1, 1])
        with col1:
            guardar = st.form_submit_button("üíæ Guardar credenciales")
        with col2:
            probar = st.form_submit_button("üìß Probar conexi√≥n")
        with col3:
            eliminar = st.form_submit_button("üóëÔ∏è Eliminar credenciales", type="secondary")
        
        # Validar entrada y procesar formulario
        if guardar or probar:
            # Validaciones b√°sicas
            if not email or not smtp_host or not smtp_port:
                st.error("Todos los campos son obligatorios")
                st.stop()
            
            try:
                smtp_port = int(smtp_port)
                if smtp_port <= 0:
                    raise ValueError()
            except ValueError:
                st.error("El puerto debe ser un n√∫mero v√°lido")
                st.stop()
                
            # Si es prueba, no necesita guardarse
            if probar:
                if not password and not credenciales:
                    st.error("Ingrese una contrase√±a para probar la conexi√≥n")
                    st.stop()
                
                # Usar la contrase√±a proporcionada o la almacenada
                test_password = password if password else credenciales.get("password", "")
                
                with st.spinner("Probando conexi√≥n..."):
                    success, message = probar_envio(email, smtp_host, smtp_port, test_password)
                    
                    if success:
                        st.success(message)
                    else:
                        st.error(message)
            
            # Si es guardar, almacenar credenciales
            if guardar:
                if not password and not credenciales:
                    st.error("Ingrese una contrase√±a para guardar las credenciales")
                    st.stop()
                
                # Usar la contrase√±a proporcionada o mantener la existente
                save_password = password if password else credenciales.get("password", "")
                
                with st.spinner("Guardando credenciales..."):
                    if guardar_credenciales(email, smtp_host, smtp_port, save_password):
                        st.success("Credenciales guardadas correctamente")
                    else:
                        st.error("Error al guardar las credenciales")
        
        # Eliminar credenciales
        if eliminar:
            with st.spinner("Eliminando credenciales..."):
                if eliminar_credenciales():
                    # Limpiar cualquier cach√© en la sesi√≥n
                    if 'email_credentials' in st.session_state:
                        del st.session_state['email_credentials']
                        
                    # Mostrar mensaje de √©xito
                    st.success("‚úÖ Credenciales eliminadas correctamente")
                    st.info("La aplicaci√≥n reiniciar√° para aplicar los cambios...")
                    
                    # Esperar un momento para que se muestre el mensaje
                    import time
                    time.sleep(2)
                    
                    # Reiniciar la aplicaci√≥n para reflejar los cambios
                    st.rerun()
                else:
                    st.error("‚ùå Error al eliminar las credenciales")
    
   

if __name__ == "__main__":
    # Configuraci√≥n b√°sica de logging
    logging.basicConfig(level=logging.INFO)
    
    # Ejecutar la p√°gina directamente (para pruebas)
    show_email_config_page()
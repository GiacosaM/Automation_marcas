"""
P√°gina de configuraci√≥n de optimizaci√≥n para la aplicaci√≥n
"""
import streamlit as st
import os
import json
import time

def show_optimization_config():
    """Mostrar opciones de configuraci√≥n para las optimizaciones"""
    st.title("‚öôÔ∏è Configuraci√≥n de Optimizaci√≥n")
    
    # Cargar configuraci√≥n actual
    config = load_optimization_config()
    
    # Configuraci√≥n general
    st.subheader("üîß Configuraci√≥n General")
    
    use_optimized = st.checkbox(
        "Usar versiones optimizadas de p√°ginas",
        value=config.get("use_optimized_pages", False),
        help="Activar para usar versiones optimizadas de las p√°ginas de la aplicaci√≥n"
    )
    
    # Configuraci√≥n de cach√©
    st.subheader("üß† Configuraci√≥n de Cach√©")
    
    cache_ttl = st.slider(
        "Tiempo de vida de cach√© (segundos)",
        min_value=10,
        max_value=600,
        value=config.get("cache", {}).get("ttl", 60),
        step=10,
        help="Tiempo que los datos permanecen en cach√© antes de actualizarse"
    )
    
    cache_dashboard = st.checkbox(
        "Habilitar cach√© para dashboard",
        value=config.get("cache", {}).get("dashboard_enabled", True),
        help="Mantener en cach√© las estad√≠sticas del dashboard"
    )
    
    cache_lists = st.checkbox(
        "Habilitar cach√© para listados",
        value=config.get("cache", {}).get("lists_enabled", True),
        help="Mantener en cach√© las listas de datos (clientes, boletines, etc.)"
    )
    
    # Configuraci√≥n de pool de conexiones
    st.subheader("üîÑ Pool de Conexiones")
    
    min_connections = st.number_input(
        "Conexiones m√≠nimas",
        min_value=1,
        max_value=5,
        value=config.get("database", {}).get("pool_min_connections", 2),
        help="N√∫mero m√≠nimo de conexiones mantenidas en el pool"
    )
    
    max_connections = st.number_input(
        "Conexiones m√°ximas",
        min_value=5,
        max_value=20,
        value=config.get("database", {}).get("pool_max_connections", 10),
        help="N√∫mero m√°ximo de conexiones permitidas en el pool"
    )
    
    # Guardar configuraci√≥n
    if st.button("üíæ Guardar Configuraci√≥n", type="primary"):
        # Actualizar configuraci√≥n
        config["use_optimized_pages"] = use_optimized
        config["cache"] = config.get("cache", {})
        config["cache"]["ttl"] = cache_ttl
        config["cache"]["dashboard_enabled"] = cache_dashboard
        config["cache"]["lists_enabled"] = cache_lists
        config["database"] = config.get("database", {})
        config["database"]["pool_min_connections"] = min_connections
        config["database"]["pool_max_connections"] = max_connections
        
        # Guardar en archivo
        save_optimization_config(config)
        
        st.success("‚úÖ Configuraci√≥n guardada correctamente")
        st.info("üí° Reinicia la aplicaci√≥n para aplicar los cambios")

def load_optimization_config():
    """Cargar configuraci√≥n de optimizaci√≥n"""
    try:
        if os.path.exists("config.json"):
            with open("config.json", "r") as f:
                config = json.load(f)
        else:
            config = {}
    except Exception as e:
        st.error(f"Error al cargar configuraci√≥n: {e}")
        config = {}
    
    return config

def save_optimization_config(config):
    """Guardar configuraci√≥n de optimizaci√≥n"""
    try:
        with open("config.json", "w") as f:
            json.dump(config, f, indent=4)
        return True
    except Exception as e:
        st.error(f"Error al guardar configuraci√≥n: {e}")
        return False

if __name__ == "__main__":
    show_optimization_config()

"""
Script para crear √≠ndices y optimizar el esquema en PostgreSQL (Supabase)
"""
import os
import streamlit as st
from dotenv import load_dotenv
import psycopg2
from psycopg2.extras import RealDictCursor
import logging

# Cargar variables de entorno
load_dotenv()

def get_postgres_connection():
    """Obtener conexi√≥n directa a PostgreSQL"""
    try:
        conn = psycopg2.connect(
            host=os.getenv('DB_HOST'),
            port=os.getenv('DB_PORT', 5432),
            database=os.getenv('DB_NAME', 'postgres'),
            user=os.getenv('DB_USER', 'postgres'),
            password=os.getenv('DB_PASSWORD')
        )
        return conn
    except Exception as e:
        st.error(f"Error conectando con PostgreSQL: {e}")
        return None

def crear_indices_optimizacion():
    """Crear √≠ndices para optimizar el rendimiento de las consultas"""
    conn = get_postgres_connection()
    if not conn:
        return False, "No se pudo conectar a la base de datos"
    
    cursor = None
    indices_creados = []
    try:
        cursor = conn.cursor()
        
        # Definir √≠ndices a crear
        indices = [
            # Tabla boletines - √≠ndices para las consultas m√°s frecuentes
            {
                "nombre": "idx_boletines_titular",
                "tabla": "boletines",
                "columnas": "titular",
                "descripcion": "√çndice para b√∫squedas por titular"
            },
            {
                "nombre": "idx_boletines_cuit",
                "tabla": "boletines",
                "columnas": "cuit",
                "descripcion": "√çndice para b√∫squedas por CUIT"
            },
            {
                "nombre": "idx_boletines_fecha",
                "tabla": "boletines",
                "columnas": "fecha_boletin",
                "descripcion": "√çndice para filtrar por fecha"
            },
            {
                "nombre": "idx_boletines_reportes",
                "tabla": "boletines",
                "columnas": "(reporte_generado, reporte_enviado)",
                "descripcion": "√çndice para filtrar por estado de reportes"
            },
            {
                "nombre": "idx_boletines_importancia",
                "tabla": "boletines",
                "columnas": "importancia",
                "descripcion": "√çndice para filtrar por importancia"
            },
            {
                "nombre": "idx_boletines_marca",
                "tabla": "boletines",
                "columnas": "marca_publicada",
                "descripcion": "√çndice para b√∫squedas por marca"
            },
            
            # Tabla clientes - √≠ndices para b√∫squedas
            {
                "nombre": "idx_clientes_titular",
                "tabla": "clientes",
                "columnas": "titular",
                "descripcion": "√çndice para b√∫squedas por titular"
            },
            {
                "nombre": "idx_clientes_cuit",
                "tabla": "clientes",
                "columnas": "cuit",
                "descripcion": "√çndice para b√∫squedas por CUIT"
            },
            {
                "nombre": "idx_clientes_email",
                "tabla": "clientes",
                "columnas": "email",
                "descripcion": "√çndice para b√∫squedas por email"
            },
            
            # Tabla emails_enviados - √≠ndices para filtrado
            {
                "nombre": "idx_emails_fecha",
                "tabla": "emails_enviados",
                "columnas": "fecha_envio",
                "descripcion": "√çndice para filtrar por fecha de env√≠o"
            },
            {
                "nombre": "idx_emails_status",
                "tabla": "emails_enviados",
                "columnas": "status",
                "descripcion": "√çndice para filtrar por estado de env√≠o"
            }
        ]
        
        # Crear cada √≠ndice si no existe
        for indice in indices:
            try:
                # Verificar si el √≠ndice ya existe
                cursor.execute(
                    """
                    SELECT 1 FROM pg_indexes
                    WHERE indexname = %s
                    """, 
                    (indice["nombre"],)
                )
                
                if cursor.fetchone() is None:
                    # Crear el √≠ndice
                    query = f"""
                    CREATE INDEX {indice["nombre"]} 
                    ON {indice["tabla"]} ({indice["columnas"]})
                    """
                    cursor.execute(query)
                    indices_creados.append(indice["nombre"])
                    st.success(f"‚úÖ √çndice {indice['nombre']} creado: {indice['descripcion']}")
                else:
                    st.info(f"‚ÑπÔ∏è √çndice {indice['nombre']} ya existe")
            
            except Exception as e:
                st.error(f"‚ùå Error al crear √≠ndice {indice['nombre']}: {e}")
        
        # Analizar tablas para actualizar estad√≠sticas
        tablas = ["boletines", "clientes", "emails_enviados"]
        for tabla in tablas:
            cursor.execute(f"ANALYZE {tabla}")
            st.info(f"üìä Estad√≠sticas actualizadas para tabla: {tabla}")
        
        conn.commit()
        return True, f"Se crearon {len(indices_creados)} √≠ndices nuevos"
    
    except Exception as e:
        conn.rollback()
        logging.error(f"Error al crear √≠ndices: {e}")
        return False, f"Error al crear √≠ndices: {e}"
    
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()

def show_optimization_page():
    """Mostrar p√°gina de optimizaci√≥n de base de datos"""
    st.title("üöÄ Optimizaci√≥n de PostgreSQL")
    st.markdown("Esta herramienta crea √≠ndices para optimizar el rendimiento de las consultas")
    st.warning("‚ö†Ô∏è Esta operaci√≥n debe ejecutarse una sola vez o despu√©s de cambios en el esquema")
    
    with st.expander("‚ÑπÔ∏è Informaci√≥n sobre √≠ndices", expanded=True):
        st.markdown("""
        ### ¬øQu√© son los √≠ndices y por qu√© son importantes?
        Los √≠ndices aceleran las consultas SQL al crear estructuras de datos ordenadas para las columnas m√°s consultadas.
        Esto permite a PostgreSQL encontrar r√°pidamente los registros que coinciden con tus criterios de b√∫squeda.
        
        ### Beneficios de los √≠ndices:
        - **B√∫squedas m√°s r√°pidas**: Reducen dr√°sticamente el tiempo de consultas con filtros (`WHERE`)
        - **Joins eficientes**: Aceleran las operaciones de uni√≥n entre tablas
        - **Ordenamiento r√°pido**: Mejoran el rendimiento de `ORDER BY`
        
        ### Columnas indexadas en este proyecto:
        - **Boletines**: titular, cuit, fecha_boletin, importancia, marca_publicada
        - **Clientes**: titular, cuit, email
        - **Emails**: fecha_envio, status
        """)
    
    if st.button("üöÄ Ejecutar Optimizaci√≥n", type="primary"):
        with st.spinner("Creando √≠ndices..."):
            success, message = crear_indices_optimizacion()
            if success:
                st.success(message)
            else:
                st.error(message)
    
    with st.expander("üìä Columnas m√°s consultadas", expanded=False):
        st.markdown("""
        ### Columnas frecuentemente utilizadas en consultas:
        
        **Tabla `boletines`**:
        - `titular`: Usado en JOINs y filtros
        - `fecha_boletin`: Filtrado por fechas
        - `importancia`: Categorizaci√≥n de boletines
        - `reporte_generado`, `reporte_enviado`: Estados de reportes
        - `marca_publicada`: B√∫squedas por marca
        
        **Tabla `clientes`**:
        - `titular`: Usado en JOINs
        - `cuit`: Identificador √∫nico
        - `email`: Para env√≠o de notificaciones
        
        **Tabla `emails_enviados`**:
        - `fecha_envio`: Filtrado por fecha
        - `status`: Estado del env√≠o
        """)

if __name__ == "__main__":
    show_optimization_page()
